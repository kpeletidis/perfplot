#!/bin/bash
#
# Perfplot is a tool for visualizing performance results e.g. from the
# output of dbench.
# Copyright (C) Kostas Peletidis 23-Dec-2022
#

## Design
#  =======
# Perfplot takes as input a set of command line argument and a file containing
# the test results.
#
# It processes the results to extract the actual data and generates one or more
# data files. It also generates one or more gnuplot scripts.
#
# The data and script(s) are then fed into gnuplot in order to generate
# the plots.
#
# The following diagram illustrates the main idea.
#
#  +--------------+       +----------+       +------------+       +---------+
#  | Test results |------>|          |------>| Data files |------>|         |
#  +--------------+       |          |       +------------+       |         |
#                         | Perfplot |                            | Gnuplot |
#  +----------------+     |          |       +---------------+    |         |
#  | CLI parameters |---->|          |------>| Gnuplot files |--->|         |
#  +----------------+     +----------+       +---------------+    +---------+
#
##
## Configuration (global) variables go here
infile=""
outfile=""
flag_multirun=""

## Helper global variables go here
MULTIRUN_PATTERN="PACKAGE"
temp1=""
temp2=""
##

function parse_args_dbench() {
  echo "parse_args_dbench: $*"
}

## Utility function to check if the input file in a log of multiple runs
## of a test tool.
## This is achieved by counting the instances of a certain pattern in the
## file.
## The pattern can be changed through the MULTIRUN_PATTERN global variable.
## Parameters:
## $1: Input file to process.
function is_multirun_log() {
  if [[ `grep "$MULTIRUN_PATTERN" $1 | wc -l` -gt 1 ]]; then
    echo "This log includes multiple runs. Splitting to individual logs..."
    return 0
  elif  [[ `grep "$MULTIRUN_PATTERN" $1 | wc -l` -eq 1 ]]; then
    return 1
  else
    echo "is_multirun_log: Log doesn't include "$MULTIRUN_PATTERN""
    return -1
  fi
}

## This function should parse CLI arguments and assign the correct values
## to the global configuration variables.
function parse_args() {
  echo "parse_args: $*"
  #TODO: Add proper parsing
  if [[ $# = 2 ]]; then
    infile="$1"
    outfile="$2"
    parse_args_dbench $*
  else
    echo "Usage: $0 <input_file> <output_file>"
    exit -1
  fi
}

## Data extraction function for dbench.
## This function creates three files:
## - tmpfile stores the name of the file with the dbench data that
##   can be plotted. It includes warmup and execution data.
## - tmpwarmup includes only the warmup data of tmpfile.
## - tmpexecute includes only the test execution data, without warmup.
## Parameters:
## $1: Input file to process.

## TODO: Consider storing plot data together with the rest of the output
## of perfplot, instead of using temporary files.
function extract_data_dbench() {
  echo "extract_data_dbench: infile=$1"
  tmpfile=$(mktemp /tmp/perfplot-perdata.XXXXXX)
  tmpwarmup=$(mktemp /tmp/perfplot-warmup.XXXXXX)
  tmpexecute=$(mktemp /tmp/perfplot-execute.XXXXXX)
  grep -w latency $1 > "$tmpfile"
  grep -w warmup "$tmpfile" > "$tmpwarmup"  # Just in case we need it
  grep -w execute "$tmpfile" > "$tmpexecute"
  #
  temp1="$tmpwarmup"
  temp2="$tmpexecute"
}

## Top level function for data extraction.
## Call tool-specific data extraction functions from here.
## Parameters:
## $1: Input file to process.
function extract_data() {
  echo "extract_data: infile=$1"
  is_multirun_log $1
  rv=$?
  echo "extract_data: rv: $rv"
  if [[ $rv -eq 0 ]]; then
    echo "Ooooh, multirun log!"
    flag_multirun=1
  else
    echo "This is NOT a multirun log"
    flag_multirun=0
  fi
  extract_data_dbench "$1"
}

## Function to generate gnuplot scripts from dbench data
## Parameters:
## $1: Input file with dbench data.
## $2: Name of the generated gnuplot script file. The extension "gnuplot"
##     will be appended to it by this function.
## $3: Extension of the generated gnuplot script, including the dot.
function generate_plot_scripts_dbench() {
  echo "generate_plot_scripts_dbench: $1 $2"
  # For dbench plots:
  # Use columns 6:3 for throughput plots
  # Use columns 6:9 for latency plots
  #
  # TODO: Extract units for xlabel and ylabel from infile.
  #
  # set terminal png nocrop enhanced size 1280,960 font "arial,12.0"
  # set output 'mythroughput.png'
  # set title 'Throughput plot'
  # set xlabel 'Time (sec)'
  # set ylabel 'Throughput (MB/sec)'
  # plot 'mydata.dat' u 6:3 with lines
  # set output 'mylatency.png'
  # set title 'Latency plot'
  # set xlabel 'Time (sec)'
  # set ylabel 'Latency (ms)'
  # plot 'mydata.dat' u 6:9 with lines
  outfile="$2$3"
  echo "generate_plot_scripts_dbench: Output: $outfile"
  echo > "$outfile"
  # Throughput
  echo "set terminal png nocrop enhanced size 1280,960 font \"arial,12.0\"
        set output '"$2"_dbench_throughput.png'
	set title 'Throughput plot'
	set xlabel 'Time (sec)'
	set ylabel 'Throughput (MB/sec)'
	plot '"$temp2"' u 6:3 title 'Throughput' with lines" >> "$outfile"
  # Latency
  echo "set terminal png nocrop enhanced size 1280,960 font \"arial,12.0\"
        set output '"$2"_dbench_latency.png'
	set title 'Latency plot'
	set xlabel 'Time (sec)'
	set ylabel 'Latency (ms)'
	plot '"$temp2"' u 6:9 title 'Latency' with lines" >> "$outfile"
}

## Top level function for the generation of the gnuplot scripts.
## Call tool-specific script generators from here.
## Parameters:
## $1: Input file to process.
## $2: Name of the generated gnuplot script.
function generate_plot_scripts() {
  echo "generate_plot_scripts: in:$1 out:$2"
  generate_plot_scripts_dbench $1 $2 ".gnuplot"
}

## This function calls gnuplot with a generated script as its parameter.
## Parameters:
## 1: The name of the generated script gnuplot should run.
function plot_data() {
  echo "plot_data: Plotting gnuplot script $1"
  gnuplot "$1"
}

## Main function
## Parameters:
## $1: Name of the input data file.
## $2: Name of the generated gnuplot script. This is also the prefix of
##     the generated plots.
parse_args $*
extract_data "$infile"
generate_plot_scripts "$infile" "$outfile"
plot_data "$outfile"

exit 0

