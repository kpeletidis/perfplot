#!/bin/bash
#
# Perfplot is a tool for visualizing performance results e.g. from the
# output of dbench.
# Copyright (C) Kostas Peletidis 23-Dec-2022
#

## Design
#  =======
# Perfplot takes as input a set of command line argument and a file containing
# the test results.
#
# It processes the results to extract the actual data and generates one or more
# data files. It also generates one or more gnuplot scripts.
#
# The data and script(s) are then fed into gnuplot in order to generate
# the plots.
#
# The following diagram illustrates the main idea.
#
#  +--------------+       +----------+       +------------+       +---------+
#  | Test results |------>|          |------>| Data files |------>|         |
#  +--------------+       |          |       +------------+       |         |
#                         | Perfplot |                            | Gnuplot |
#  +----------------+     |          |       +---------------+    |         |
#  | CLI parameters |---->|          |------>| Gnuplot files |--->|         |
#  +----------------+     +----------+       +---------------+    +---------+
#
##
function parse_args() {
  echo "parse_args: $*"
}

function extract_data() {
  echo "extract_data: $1"
  # tmpfile=$(mktemp /tmp/perfplot-perdata.XXXXXX)
  # tmpwarmup=$(mktemp /tmp/perfplot-warmup.XXXXXX)
  # tmpexecute=$(mktemp /tmp/perfplot-execute.XXXXXX)
  # grep -w latency $1 > "$tmpfile"
  # grep -w warmup $(tmpfile) > "$tmpwarmup"
  # grep -w execute $(tmpfile) > "$tmpexecute"
  #
}

function generate_plot_scripts() {
  echo "generate_plot_scripts: $1"
}

function plot_data() {
  echo "plot_data: $1"
}

parse_args $*
extract_data "Extract data here"
generate_plot_scripts "Generate gnuplot scripts here"
plot_data "Plot data here"

exit 0

